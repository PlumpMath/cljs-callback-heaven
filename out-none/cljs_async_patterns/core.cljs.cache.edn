;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros, <? cljs-async-patterns.macros, asynchronize cljs-asynchronize.macros}, :excludes #{}, :name cljs-async-patterns.core, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, buffer cljs.core.async, close! cljs.core.async, offer! cljs.core.async, chan cljs.core.async, >! cljs.core.async, alts! cljs.core.async, poll! cljs.core.async, put! cljs.core.async, take! cljs.core.async}, :defs {<print {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/src/cljs_async_patterns/core.cljs", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([c]))}, :name cljs-async-patterns.core/<print, :variadic false, :file "src/cljs_async_patterns/core.cljs", :end-column 13, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, chan-sanitized {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/src/cljs_async_patterns/core.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([val])), :doc "Since channels cannot contain nil, this function converts nil values to false."}, :name cljs-async-patterns.core/chan-sanitized, :variadic false, :file "src/cljs_async_patterns/core.cljs", :end-column 21, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Since channels cannot contain nil, this function converts nil values to false."}, >1 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/src/cljs_async_patterns/core.cljs", :line 30, :column 7, :end-line 30, :end-column 9, :arglists (quote ([c] [c E-msg])), :doc "If at all possible, jams the 1st callback argument into the input channel.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [c E-msg]), :arglists ([c] [c E-msg]), :arglists-meta (nil nil)}}, :name cljs-async-patterns.core/>1, :variadic false, :file "src/cljs_async_patterns/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [c E-msg]), :arglists ([c] [c E-msg]), :arglists-meta (nil nil)}, :method-params ([c] [c E-msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists ([c] [c E-msg]), :doc "If at all possible, jams the 1st callback argument into the input channel."}, >2 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/src/cljs_async_patterns/core.cljs", :line 35, :column 7, :end-line 35, :end-column 9, :arglists (quote ([c] [c E-msg])), :doc "If at all possible, jams the 2nd callback argument into the input channel.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [c E-msg]), :arglists ([c] [c E-msg]), :arglists-meta (nil nil)}}, :name cljs-async-patterns.core/>2, :variadic false, :file "src/cljs_async_patterns/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [c E-msg]), :arglists ([c] [c E-msg]), :arglists-meta (nil nil)}, :method-params ([c] [c E-msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists ([c] [c E-msg]), :doc "If at all possible, jams the 2nd callback argument into the input channel."}, >3 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/src/cljs_async_patterns/core.cljs", :line 46, :column 7, :end-line 46, :end-column 9, :arglists (quote ([c])), :doc "If at all possible, jams the 3rd callback argument into the input channel."}, :name cljs-async-patterns.core/>3, :variadic false, :file "src/cljs_async_patterns/core.cljs", :end-column 9, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "If at all possible, jams the 3rd callback argument into the input channel."}, >? {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/src/cljs_async_patterns/core.cljs", :line 60, :column 7, :end-line 60, :end-column 9, :arglists (quote ([c] [c E-msg])), :doc "Jams the first truthy argument of a callback function into the input channel.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [c E-msg]), :arglists ([c] [c E-msg]), :arglists-meta (nil nil)}}, :name cljs-async-patterns.core/>?, :variadic false, :file "src/cljs_async_patterns/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [c E-msg]), :arglists ([c] [c E-msg]), :arglists-meta (nil nil)}, :method-params ([c] [c E-msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists ([c] [c E-msg]), :doc "Jams the first truthy argument of a callback function into the input channel."}, -main {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/src/cljs_async_patterns/core.cljs", :line 79, :column 7, :end-line 79, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs-async-patterns.core/-main, :variadic true, :file "src/cljs_async_patterns/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, cljs-async-patterns.macros cljs-async-patterns.macros, dm cljs-asynchronize.macros, cljs-asynchronize.macros cljs-asynchronize.macros}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:recur :else]}, :doc nil}