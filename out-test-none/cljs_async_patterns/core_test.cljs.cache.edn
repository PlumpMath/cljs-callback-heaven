;; Analyzed by ClojureScript 1.7.228
{:use-macros {newest cljs-async-patterns.macros, testing cljs.test, async cljs.test, go cljs.core.async.macros, is cljs.test, go-loop cljs.core.async.macros, deftest cljs.test, asynchronize cljs-asynchronize.macros, newest1 cljs-async-patterns.macros, run-tests cljs.test}, :excludes #{}, :name cljs-async-patterns.core-test, :imports nil, :requires {core cljs-async-patterns.core, cljs-async-patterns.core cljs-async-patterns.core, cljs.test cljs.test, node cljs.nodejs, cljs.nodejs cljs.nodejs, cljs.core.async cljs.core.async, s clojure.string, clojure.string clojure.string}, :uses {<! cljs.core.async, buffer cljs.core.async, close! cljs.core.async, offer! cljs.core.async, chan cljs.core.async, >! cljs.core.async, alts! cljs.core.async, poll! cljs.core.async, put! cljs.core.async, take! cljs.core.async}, :defs {async-1 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :line 24, :column 7, :end-line 24, :end-column 14, :arglists (quote ([arg cb])), :doc "Executes a 1-argument callback."}, :name cljs-async-patterns.core-test/async-1, :variadic false, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :end-column 14, :method-params ([arg cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg cb])), :doc "Executes a 1-argument callback."}, async-2 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :line 31, :column 7, :end-line 31, :end-column 14, :arglists (quote ([arg cb])), :doc "Executes a 2-argument callback."}, :name cljs-async-patterns.core-test/async-2, :variadic false, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :end-column 14, :method-params ([arg cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg cb])), :doc "Executes a 2-argument callback."}, async-3 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :line 38, :column 7, :end-line 38, :end-column 14, :arglists (quote ([arg cb])), :doc "Executes a 3-argument callback."}, :name cljs-async-patterns.core-test/async-3, :variadic false, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :end-column 14, :method-params ([arg cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg cb])), :doc "Executes a 3-argument callback."}, prnt-cb-1 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :line 46, :column 6, :end-line 46, :end-column 15}, :name cljs-async-patterns.core-test/prnt-cb-1, :variadic false, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :end-column 15, :method-params ([res]), :protocol-impl nil, :arglists-meta (), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists nil}, prnt-cb-2 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :line 47, :column 6, :end-line 47, :end-column 15}, :name cljs-async-patterns.core-test/prnt-cb-2, :variadic false, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :end-column 15, :method-params ([err res]), :protocol-impl nil, :arglists-meta (), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists nil}, prnt-cb-3 {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :line 48, :column 6, :end-line 48, :end-column 15}, :name cljs-async-patterns.core-test/prnt-cb-3, :variadic false, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :end-column 15, :method-params ([arg1 arg2 arg3]), :protocol-impl nil, :arglists-meta (), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists nil}, >1-test {:protocol-inline nil, :meta {:file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :line 60, :column 10, :end-line 60, :end-column 17}, :name cljs-async-patterns.core-test/>1-test, :variadic false, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 60, :end-line 60, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, t_cljs_async_patterns$core_test14276 {:num-fields 1, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.test/IAsyncTest cljs.core/IWithMeta}, :name cljs-async-patterns.core-test/t_cljs_async_patterns$core_test14276, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :type true, :anonymous true, :column 3, :line 61, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs_async_patterns$core_test14276 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.test/IAsyncTest cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta14277])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.test/IAsyncTest cljs.core/IWithMeta}, :name cljs-async-patterns.core-test/->t_cljs_async_patterns$core_test14276, :variadic false, :file "/home/george/Dropbox/cljs-async-patterns/test/cljs_async_patterns/core_test.cljs", :method-params ([meta14277]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta14277])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, cljs-async-patterns.macros cljs-async-patterns.macros, dm cljs-asynchronize.macros, cljs-asynchronize.macros cljs-asynchronize.macros, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{cljs-async-patterns.core-test/>1-test = <! cljs-async-patterns.core-test :else :default :ns :name :file :end-column :recur :type c3 >1-test cljs-async-patterns.core/>? _ :column meta14277 :fail :line not c2 :expected :end-line c :error :pass c1 :arglists :actual :doc node/require :test :message .readFile}, :order [:else :type :expected :actual :message = <! c1 not :fail :recur c3 :pass :default c2 :error meta14277 cljs-async-patterns.core-test/>1-test :ns :name :file :end-column :column :line :end-line :arglists :doc :test cljs-async-patterns.core-test >1-test _ cljs-async-patterns.core/>? c .readFile node/require]}, :doc nil}